//properties([pipelineTriggers([githubPush()])])

pipeline {
    agent any
    
     
    
    environment {
        // Define environment variables
       // client-server-ip='34.205.28.142'
        STATIC_ANALYSIS_TYPE = '1'               // 0 for trivy scan only & 1 for sonarqube scan
        DOCKER_HUB_CREDENTIALS =credentials('Dockerhub')
        GIT_CREDENTIALS =credentials('git-login')
        //sonar qube
       SCANNER_HOME = tool 'SonarScanner' // Assuming SonarQube Scanner is configured as a tool in Jenkins
        SONAR_PROJECT_KEY = 'OTA-server'
        SONAR_PROJECT_NAME = 'OTA-server'
        SONAR_PROJECT_VERSION = '1.0'
        SONAR_INSTANCE_IP= '44.195.26.185'
        SONAR_TOKEN= credentials('sonar-credentials')
        //trivy
        DOCKER_IMAGE= 'ota-server'
        DOCKER_CONTAINER= "OTA-server"        

    }
    
    stages {
        stage('Git Checkout') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'git-login', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                // Checkout source code from GitHub
                git branch: 'OTA-service',credentialsId: 'git-login', url: 'https://github.com/SaherAttia/Frontend-Module.git'
                }
            }
        }
        
         stage('Docker Build') {
            steps {
                script {
                   sh 'docker build -t kaream10/${DOCKER_IMAGE}:latest .' 
                }
            }
        }



stage('Sonar-Qube-Analysis'){
            when {
               expression { STATIC_ANALYSIS_TYPE == '0'}
            }

            steps{
                
                    
                   script {
                    withSonarQubeEnv('Sonar-Server') {
                        sh "echo 'start sonarqube analysis'"
                         withCredentials([string(credentialsId: 'sonar-credentials', variable: 'sonarLogin')]) {
                        sh "${SCANNER_HOME}/bin/sonar-scanner \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY}\
                            -Dsonar.projectName=${SONAR_PROJECT_NAME}\
                            -Dsonar.projectVersion=${SONAR_PROJECT_VERSION}\
                            -Dsonar.token=${SONAR_TOKEN}"

                        
                        sh " echo 'end static analysis'"
                    }
                     //waitForQualityGate abortPipeline: true, serverUrl: 'Sonar-Server'
                }
                   
                }
            }
            }




            stage('Quality Gate'){
                when {
               expression { STATIC_ANALYSIS_TYPE == '0'} //
            }
                    steps{
                    timeout(time: 3, unit: 'MINUTES'){
                    script{
                        
                        def qg = waitForQualityGate()
                        if(qg.status != 'OK'){
                            error "ERROR"
                        }
                        //else sh "echo 'analysis success'"
                    }

                    }
                    }
                
            }

                    stage ('trivy scan'){
                       when {
               expression { STATIC_ANALYSIS_TYPE == '0'} //
            }
            steps{
            script {
                       // Scan the Docker image with Trivy
                       //sh "trivy --exit-code 1 --severity HIGH,CRITICAL --no-progress $CONTAINER_IMAGE"

                     // Execute Trivy scan
                    def trivyScan =  sh(script: "trivy image -f json -o results.json kaream10/${DOCKER_IMAGE}:latest", returnStatus: true)  
                    
                    // Check the exit code
                    if (trivyScan == 0) {
                        echo "No high or critical vulnerabilities found."
                    } else {
                        error "High or critical vulnerabilities found."
                    }
                    // Archive the JSON report
                    archiveArtifacts artifacts: 'results.json', onlyIfSuccessful: false
                   }
            }
        }
          



        stage('Container regestiry Push') {
            steps {
                script {
                     sh 'echo $DOCKER_HUB_CREDENTIALS_PSW |  docker login -u $DOCKER_HUB_CREDENTIALS_USR --password-stdin'                		
	                    echo 'Login Completed'      
	                         
                    
                        sh "docker push kaream10/${DOCKER_IMAGE}:latest"           
                        echo 'Push Image Completed'       
                }
            }
        }
        stage ('AWS Deploying'){
            steps{
                 sshagent(credentials: ['ssh-credentials']) {       //UPDATEABLE
                        sh """
			            ssh -o StrictHostKeyChecking=no -l ubuntu 3.209.49.156 << END 
                        docker ps
                        # Check if the container exists
                        if docker ps -a --format '{{.Names}}' | grep -q "^${DOCKER_CONTAINER}\$"; then
                            # Container exists, stop and remove it
                            docker stop "${DOCKER_CONTAINER}" >/dev/null 2>&1  # Stop the container silently
                            docker rm "${DOCKER_CONTAINER}" >/dev/null 2>&1    # Remove the container silently
                            echo "Container '${DOCKER_CONTAINER}' has been removed."
                        else
                            # Container does not exist
                            echo "Container '${DOCKER_CONTAINER}' does not exist."
                        fi
                        docker run -d -p 5000:5000 --name ${DOCKER_CONTAINER}\
                        kaream10/${DOCKER_IMAGE}:latest
                        echo "${DOCKER_CONTAINER} container up & running"
                        docker ps
                    """
                        // should put the updated code on the docker hub using map10/emqx:latest --> for example
                 }
            }
        }
    }

    post {
        success {
            slackSend color: 'good', message: "Build SUCCESS for ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            
            echo "Success"
        }
        failure {
            slackSend color: 'danger', message: "Build failed for ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
           
        }
    }
}
